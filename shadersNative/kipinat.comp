#version 430

uniform float h = 0.1;
uniform vec4 gravity = vec4(0.0,-9.81,0.0,0.0);
uniform float phase = 1.0;

// Position/velocity data.
struct PVdata
{
  vec4 pos;
  vec4 vel;
};

// Local work group size.
layout (local_size_x = 400,local_size_y=1,local_size_z=1) in;

layout (std430, binding = 0) buffer InBuf 
{
  PVdata input[];
};

layout (rgba32f, binding = 1) uniform image2D temp; 

void euler(uint pos)
{
  PVdata t = input[pos]; 
  PVdata joo; 
  //PVdata temp;
  //temp.pos = vec4(1.5f,0.5,1.5,1.0);
  //temp.vel = vec4(1.5f,1.5,1.5,1.0);
  //PVdata temp = input[pos]; 
  //t.pos = vec4(t.vel.xyz,0.0)+vec4(t.pos.xyz,0.0);
  //t.pos = t.vel + gravity*0.0001; // vec4(1.0,0.5,1.0,0.0);
  //joo.pos = vec4(pos,pos,pos,pos);// + h*gravity;
  joo.pos = t.pos + t.vel * h;// + h*gravity;
  joo.vel = h*gravity + t.vel;// + h*gravity;
  //t.vel = t.vel;
  //temp.vel = newVel;
  //joo.pos = vec4(8.0,7.0,6.0,5.0);
  //outbut[pos] = temp;
  imageStore(temp, ivec2(2*pos,0), joo.pos);
  imageStore(temp, ivec2(2*pos+1,0), joo.vel);
  //imageStore(temp, ivec2(2*pos,0), joo.pos);
  //imageStore(temp, ivec2(2*pos+1,0), joo.vel);
}

void copyToState(uint pos)
{
  vec4 position = imageLoad(temp, ivec2(2*pos,0));
  vec4 velocity = imageLoad(temp, ivec2(2*pos+1,0));
  input[pos].pos = position;
  input[pos].vel = velocity;
  //input[pos].pos = vec4(666.0,666.0,666.0,1.0);
  //input[pos].vel = vec4(666.1,666.1,666.1,2.0);
}

void main()
{
  // Euler.
  uint pos = gl_GlobalInvocationID.x;
  //euler(pos);
  if (phase == 1.0) euler(pos);
  else if (phase == 2.0) copyToState(pos);
}
