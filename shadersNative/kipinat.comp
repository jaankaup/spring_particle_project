#version 430

uniform float h = 0.1;
uniform vec4 gravity = vec4(0.0,-0.00981,0.0,0.0);
uniform float phase = 1.0;

// Position/velocity data.
struct PVdata
{
  vec4 pos;
  vec4 vel;
  vec4 friend;
  vec4 rest;
};

// Local work group size.
layout (local_size_x = 200,local_size_y=1,local_size_z=1) in;

//                        0                                          1
// +--------------------------------------------------------------------------------------------
// | (posX,posY,posZ,posW,velX,velY,velZ,velW) | (posX,posY,posZ,posW,velX,velY,velZ,velW) | 
// +--------------------------------------------------------------------------------------------
//
layout (std430, binding = 0) buffer InBuf 
{
  PVdata input[];
};

//        k1_0_vel                k2_0_vel                k3_0_vel            k4_0_vel 
// +----------------------+----------------------+----------------------+----------------------+---
// | (v_x, v_y, v_z, v_w) | (v_x, v_y, v_z, v_w) | (v_x, v_y, v_z, v_w) | (v_x, v_y, v_z, v_w) |
// +----------------------+----------------------+----------------------+----------------------+---
//
layout (std430, binding = 1) buffer Temp1Buf 
{
  vec4 temp1[];
};

// Lasketaan uusi vel. Eli lasketaan edellinen velocity ja "gravitaatio" yhteen.
vec4 evalF(PVdata pv)
{
  return (pv.vel + gravity);
}

// Tallennetaan alku-derivaatta temp[pos*4] kohtaan. Eli voimien summa alkupisteessa.
// k1 = f(xn,tn)
void k1(uint pos)
{
  vec4 derivate_k1 = evalF(input[pos]); 
  temp1[4*pos] = derivate_k1;
}

// Lasketaan mid point ja tallennetaan sen derivaatta temp[pos*4+1] kohtaan.
// k2 = f(xn+h*0.5*k1,tn+h*0.5)
void k2(uint pos)
{
 // Haetaan derivaatta aloitus pisteessa.
 vec4 der = temp1[pos*4];

 // Lasketaan "middle point", eli positio alkupisteesta euler * h/2 suuntaan.
 vec4 newPos = input[pos].pos + 0.5 * h * der;

 // Luodaan middle pointille positio ja velocity.
 PVdata pv_middle_point;
 pv_middle_point.pos = newPos;
 pv_middle_point.vel = der + h*0.5*der;

 // Lasketaan middle pointin derivaatta.
 vec4 middle_point_der = evalF(pv_middle_point);

 // Tallennetaan middle pointin derivaatta temp[pos*4+1].
 temp1[pos*4+1] = middle_point_der;
}

// Lasketaan k3.
void k3(uint pos)
{
 // Haetaan derivaatta k2:sta.
 vec4 der = temp1[pos*4+1];

 // Lasketaan k3 point (middle point k2:sta).
 vec4 newPos = input[pos].pos + 0.5 * h * der;

 // Luodaan k3:lle positio ja velocity.
 PVdata pv_k3;
 pv_k3.pos = newPos;
 pv_k3.vel = der + h*0.5*der; //der;

 // Lasketaan derivaatta k3:lle.
 vec4 k3_der = evalF(pv_k3);

 // Tallennetaan k3:n derivaatta.
 temp1[pos*4+2] = k3_der;
}

// Lasketaan k4 derivaatta.
void k4(uint pos)
{
 // Haetaan derivaatta k3:sta.
 vec4 der = temp1[pos*4+2];

 // Lasketaan k4 point.
 vec4 newPos = input[pos].pos + h * der;

 // Luodaan k4:lle positio ja velocity.
 PVdata pv_k4;
 pv_k4.pos = newPos;
 pv_k4.vel = der + h*der;
 //pv_k4.vel = der;

 // Lasketaan k4:n derivaatta.
 vec4 k4_der = evalF(pv_k4);

 // Tallenetaan k4 derivaatta.
 temp1[pos*4+3] = k4_der;

 vec4 lopullinen_derivaatta = 1.0/6.0 * (temp1[pos*4]+2*temp1[pos*4+1]+2*temp1[pos*4+2]+temp1[pos*4+3]);
 input[pos].pos = input[pos].pos + lopullinen_derivaatta * h; 
 input[pos].vel = lopullinen_derivaatta + h * lopullinen_derivaatta;
}

void euler(uint pos)
{
  k1(pos);
  vec4 der = temp1[pos*4];
  vec4 newPos = input[pos].pos + h*der;
  input[pos].pos = newPos;
  input[pos].vel = der + h * der;
}

void copyToState(uint pos)
{
//    PVdata b;
//    b.pos = vec4(pos,pos,pos,pos);
//    b.vel = vec4(pos,pos,pos,pos);
    input[pos].pos = temp1[4*pos];
}

void main()
{
  uint pos = gl_GlobalInvocationID.x;
  if (phase == 1.0) k1(pos);
  else if (phase == 2.0) k2(pos);
  else if (phase == 3.0) k3(pos);
  else if (phase == 4.0) k4(pos);
  else if (phase == 5.0) euler(pos);
//  else if (phase == 2.0) copyToState(pos);
}

// TEKSTUURIN KANSSA
//void euler(uint pos)
//{
//  PVdata t = input[pos]; 
//  PVdata joo; 
//  joo.pos = t.pos + t.vel * h;// + h*gravity;
//  joo.vel = h*gravity + t.vel;// + h*gravity;
//  imageStore(temp, ivec2(2*pos,0), joo.pos);
//  imageStore(temp, ivec2(2*pos+1,0), joo.vel);
//}
//
//void copyToState(uint pos)
//{
//  vec4 position = imageLoad(temp, ivec2(2*pos,0));
//  vec4 velocity = imageLoad(temp, ivec2(2*pos+1,0));
//  input[pos].pos = position;
//  input[pos].vel = velocity;
//}
//layout (rgba32f, binding = 1) uniform image2D temp;  // Jos kaytetaan tekstuuria.
